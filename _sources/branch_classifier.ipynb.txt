{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Branch Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "from glob import glob\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import os\n",
    "import pandas as pd\n",
    "import sys\n",
    "import torch\n",
    "\n",
    "sys.path.append(\"../\")\n",
    "from data_prep import collect, load\n",
    "from solvers import branch_classifier\n",
    "import models\n",
    "date = datetime.now().strftime(\"%m-%d-%y\")\n",
    "dtype = torch.float32\n",
    "DEVICE = \"cuda\" if torch.cuda.is_available() else \"cpu\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Collect branch classifier training data\n",
    "Training data consists of volumetric image patches chosen randomly from the neuron node coordinates given\\\n",
    "in the SWC file with an added small random translation. Image patches are labeled 1 if they are centered on\\\n",
    " a branch point and 0 otherwise."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get sample points from swc files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "loading file: /home/brysongray/data/neuromorpho_sub1/beining/CNG version/35dpi_ipsi_infra_06.CNG.swc\n",
      "loading file: /home/brysongray/data/neuromorpho_sub1/campos/CNG version/Astro-1.CNG.swc\n",
      "loading file: /home/brysongray/data/neuromorpho_sub1/allen cell types/CNG version/646805498_transformed.CNG.swc\n"
     ]
    }
   ],
   "source": [
    "# Load SWC file data into python lists\n",
    "labels_dir = \"/home/brysongray/data/neuromorpho_sub1\"\n",
    "files = [f for x in os.walk(labels_dir) for f in glob(os.path.join(x[0], '*.swc'))]\n",
    "swc_lists = []\n",
    "for f in files:\n",
    "    swc_lists.append(load.swc(f))\n",
    "\n",
    "# Collect random sample points from SWC data\n",
    "samples_per_file = 50\n",
    "fnames = [f.split('/')[-1].split('.')[0] for f in files]\n",
    "sample_points = collect.swc_random_points(samples_per_file, swc_lists, fnames, adjust=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Save sample patches and labels from image files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save sample patches from the images centered at the sample points\n",
    "image_dir = \"/home/brysongray/data/simulated_neurons/neuromorpho_sub1_with_artifacts\"\n",
    "out_dir = \"classifier_data\"\n",
    "if not os.path.exists(out_dir):\n",
    "    os.makedirs(out_dir, exist_ok=True)\n",
    "name = \"neuromorpho_test\"\n",
    "\n",
    "collect.collect_data(sample_points, image_dir, out_dir, name, date)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### View some example input images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "observations = os.listdir(os.path.join(out_dir, \"observations\"))\n",
    "training_annotations = pd.read_csv(glob(os.path.join(out_dir, \"*_labels.csv\"))[0])\n",
    "ids = np.random.choice(len(training_annotations), size=9)\n",
    "sample = training_annotations.iloc[ids]\n",
    "\n",
    "fig, ax = plt.subplots(3,3)\n",
    "ax = ax.flatten()\n",
    "for i in range(len(ax)):\n",
    "    img = torch.load(os.path.join(out_dir,\"observations\", sample.iloc[i,0]), weights_only=True) # type: ignore\n",
    "    ax[i].imshow(img[0].amax(0))\n",
    "    ax[i].set_title(f\"label: {sample.iloc[i,1].item()}\")\n",
    "    ax[i].set_axis_off()\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train branch classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Instantiate dataloader for training and test datasets\n",
    "Dataloaders use a weighted random sampler to balance classes. Additionally, the training dataset\\\n",
    " adds a random permutation and flip to the image patch at retrieval."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# set source data files paths\n",
    "training_labels_file = \"classifier_data/branch_classifier_neuromorpho_test_02-07-25_test_labels.csv\"\n",
    "test_labels_file = \"classifier_data/branch_classifier_neuromorpho_test_02-07-25_training_labels.csv\"\n",
    "img_dir = \"classifier_data/observations\"\n",
    "\n",
    "# instantiate training and test datasets\n",
    "transform = branch_classifier.transform # random permutation and flip\n",
    "training_data = branch_classifier.StateData(labels_file=training_labels_file,\n",
    "                          img_dir=img_dir,\n",
    "                          transform=transform)\n",
    "test_data = branch_classifier.StateData(labels_file=test_labels_file,\n",
    "                          img_dir=img_dir)\n",
    "\n",
    "# instantiate dataloaders\n",
    "training_dataloader = branch_classifier.init_dataloader(training_data)\n",
    "test_dataloader = branch_classifier.init_dataloader(test_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## View balanced data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(3,3)\n",
    "axs = axs.flatten()\n",
    "\n",
    "X,y = next(iter(training_dataloader))\n",
    "for i, ax in enumerate(axs):\n",
    "    ax.imshow(X[i,0].amax(0))\n",
    "    ax.set_title(f\"Label: {y[i]}\")\n",
    "    ax.set_axis_off()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1\n",
      "-------------------------------\n",
      "Accuracy: 40.0, Loss: 0.405724  [   30/   30]\n",
      "Test Error: \n",
      " Accuracy: 50.0%, Avg loss: 24.919770 \n",
      "           Precision: 0.500, Recall: 1.000\n",
      "Epoch 2\n",
      "-------------------------------\n",
      "Accuracy: 76.66666666666667, Loss: 0.828855  [   30/   30]\n",
      "Test Error: \n",
      " Accuracy: 53.3%, Avg loss: 22.108765 \n",
      "           Precision: 0.533, Recall: 1.000\n",
      "Epoch 3\n",
      "-------------------------------\n",
      "Accuracy: 80.0, Loss: 0.543504  [   30/   30]\n",
      "Test Error: \n",
      " Accuracy: 51.7%, Avg loss: 23.350894 \n",
      "           Precision: 0.517, Recall: 1.000\n",
      "Epoch 4\n",
      "-------------------------------\n",
      "Accuracy: 70.0, Loss: 0.260397  [   30/   30]\n",
      "Test Error: \n",
      " Accuracy: 42.5%, Avg loss: 32.415985 \n",
      "           Precision: 0.425, Recall: 1.000\n",
      "Epoch 5\n",
      "-------------------------------\n",
      "Accuracy: 93.33333333333333, Loss: 0.181836  [   30/   30]\n",
      "Test Error: \n",
      " Accuracy: 48.3%, Avg loss: 26.552392 \n",
      "           Precision: 0.483, Recall: 1.000\n",
      "Done!\n"
     ]
    }
   ],
   "source": [
    "out_dir = \"classifier_weights/\"\n",
    "if not os.path.exists(out_dir):\n",
    "    os.makedirs(out_dir, exist_ok=True)\n",
    "\n",
    "lr = 1e-3\n",
    "epochs = 5\n",
    "classifier = models.ResNet(models.ResidualBlock, [3, 4, 6, 3], num_classes=1)\n",
    "classifier = classifier.to(device=DEVICE, dtype=dtype)\n",
    "\n",
    "branch_classifier.train(training_dataloader, test_dataloader, out_dir, lr, epochs, classifier, state_dict=None)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tractography",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
